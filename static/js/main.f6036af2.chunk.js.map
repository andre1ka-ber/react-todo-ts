{"version":3,"sources":["constants/navigationLinks.ts","components/NavigationList.tsx","redux/actionTypes.ts","redux/actionCreators/todosActions.ts","components/TodoForm.tsx","components/TodoItem.tsx","components/TodoList.tsx","views/Main.tsx","views/FetchedTodos.tsx","views/CompletedTodos.tsx","App.tsx","reportWebVitals.ts","redux/reducers/todosReducer.ts","redux/reducers/fetchedTodosReducer.ts","redux/reducers/rootReducer.ts","redux/sagas.ts","redux/store.ts","index.tsx"],"names":["navigationLinks","icon","title","path","NavigationList","location","useLocation","classes","array","pathname","push","join","className","map","item","index","to","src","height","width","ADD_TODO","COMPLETE_TODO","MOVE_TODO_TO_MAIN","DELETE_TODO","FETCH_TODOS","SET_FETCHED_TODOS","setFetchedTodos","todos","type","payload","mapDispatchToProps","createTodo","id","Date","now","completed","connect","useState","todoTitle","setTodoTitle","placeholder","onChange","event","prevTitle","target","value","onClick","toggleTodo","deleteTodo","todo","checked","confirm","connector","state","length","Main","Fragment","fetchTodos","fetchedTodos","completedTodos","App","exact","component","CompletedTodos","FetchedTodos","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","trash","rootReducer","combineReducers","action","mainTodos","filter","updatedTodos","concat","sagaWatcher","sagaFetchWorker","takeEvery","call","fetchTodosFromApi","put","a","fetch","response","json","sagaMiddleware","createSagaMiddleware","store","createStore","compose","applyMiddleware","thunk","window","__REDUX_DEVTOOLS_EXTENSION__","run","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f6036af2.chunk.js","sourcesContent":["export const navigationLinks = [\n  {\n    icon: \"fas fa-home\",\n    title: \"Главная\",\n    path: \"/\"\n  },\n  {\n    icon: \"fas fa-list-ul\",\n    title: \"Список завершенных\",\n    path: \"/completed\"\n  },\n  {\n    icon: \"fas fa-trash-alt\",\n    title: \"Корзина\",\n    path: \"/trash\"\n  },\n  {\n    icon: \"fas fa-sliders-h\",\n    title: \"Тестовые данные\",\n    path: \"/fetched\"\n  }\n];","import React from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport { useLocation } from \"react-router-dom\";\nimport { navigationLinks } from \"../constants/navigationLinks\";\n\nconst NavigationList: React.FC = () => {\n    const location = useLocation();\n\n    const classes = (path: string): string => {\n        const array = ['navigation-item'];\n        if (location.pathname === path) {\n            array.push(\"active\")\n        }\n        return array.join(\" \")\n    }\n\n    return (\n        <div className={\"navigation\"}>\n            {navigationLinks.map((item, index) => {\n                return (\n                  <NavLink to={item.path} key={item.icon}>\n                      <div className={classes(item.path)} >\n                          <div className={\"navigation-item-icon\"}>\n                              <i className={item.icon}></i>\n                          </div>\n                          <div className={\"navigation-item-title\"}>\n                              <h4>{ item.title }</h4>\n                          </div>\n                      </div>\n                  </NavLink>\n                )\n            })}\n            <div className={\"navigation-item about-me-item\"}>\n                <div className={\"navigation-item-icon\"}>\n                    <img src={\"logo192.png\"} height={32} width={32} />\n                </div>\n                <div className={\"navigation-item-title\"}>\n                    Made with ReactJS + TypeScript\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default NavigationList;","export const ADD_TODO = \"ADD_TODO\";\nexport const COMPLETE_TODO = \"COMPLETE_TODO\";\nexport const MOVE_TODO_TO_MAIN = \"MOVE_TODO_TO_MAIN\";\nexport const DELETE_TODO = \"DELETE_TODO\";\nexport const RESTORE_TODO = \"RESTORE_TODO\";\n\nexport const FETCH_TODOS = \"FETCH_TODOS\"\nexport const SET_FETCHED_TODOS = \"SET_FETCHED_TODOS\";","import {ADD_TODO, DELETE_TODO, COMPLETE_TODO, FETCH_TODOS, SET_FETCHED_TODOS} from \"../actionTypes\";\nimport {ITodo} from \"../../interfaces/todo\";\n\nexport const createTodo = (title: string) => {\n  return {\n    type: ADD_TODO,\n    payload: {\n      title,\n      id: Date.now(),\n      completed: false\n    }\n  }\n}\nexport const toggleTodo = (id: number) => {\n  return { type: COMPLETE_TODO, payload: { id } }\n}\nexport const deleteTodo = (id: number) => {\n  return {type: DELETE_TODO, payload: {id}}\n}\nexport const fetchTodos = () => {\n  return { type: FETCH_TODOS }\n}\nexport const setFetchedTodos = (todos: ITodo[]) => {\n  return { type: SET_FETCHED_TODOS, payload: todos }\n}","import React, {useState} from \"react\"\nimport {connect} from \"react-redux\";\nimport {createTodo} from \"../redux/actionCreators/todosActions\";\n\ninterface ITodoFormProps {\n  createTodo(title: string): void;\n}\n\nconst TodoForm: React.FC<ITodoFormProps> = ({createTodo}) => {\n    const [todoTitle, setTodoTitle] = useState(\"\");\n\n    const changeHandler = (event: React.ChangeEvent<HTMLInputElement>) => {\n      setTodoTitle(prevTitle => event.target.value)\n    }\n\n    const clickHandler = (event: React.MouseEvent) => {\n      if (!todoTitle) {\n        return;\n      }\n      createTodo(todoTitle)\n      setTodoTitle(() => \"\")\n    }\n\n    return (\n        <div className={\"todo-input-wrapper\"}>\n            <h3 className={\"label-md\"}>Добавить новую задачу</h3>\n            <div className={\"todo-input-form\"}>\n                <input type=\"text\" placeholder={\"Название задачи\"} onChange={changeHandler} value={todoTitle}/>\n                <button onClick={clickHandler}>Добавить</button>\n            </div>\n        </div>\n    )\n};\n\nconst mapDispatchToProps = {\n  createTodo\n}\n\nexport default connect(null, mapDispatchToProps)(TodoForm);","import React from \"react\";\nimport {connect} from \"react-redux\";\nimport {deleteTodo, toggleTodo} from \"../redux/actionCreators/todosActions\";\nimport {ITodo} from \"../interfaces/todo\";\n\ndeclare var confirm: (question: string) => boolean;\n\nconst mapDispatchToProps = {\n  toggleTodo,\n  deleteTodo\n}\n\ninterface ITodoItemProps {\n  todo: ITodo;\n  toggleTodo(id: number): void;\n  deleteTodo(id: number): void;\n}\n\nconst TodoItem: React.FC<ITodoItemProps> = ({todo, toggleTodo, deleteTodo}) => {\n  const clickHandler = () => {\n    if (confirm(\"Вы уверены?\")) {\n      deleteTodo(todo.id)\n    }\n  }\n\n  return (\n    <div className={`todo-list-item ${todo.completed ? \"completed\" : \"\" }`}>\n      <input type=\"checkbox\"  checked={todo.completed} onChange={() => toggleTodo(todo.id)} />\n      <h5>{todo.title}</h5>\n      <button className={\"todo-list-item-button\"} onClick={clickHandler}>\n        <i className={\"fas fa-times\"}></i>\n      </button>\n    </div>\n  )\n}\n\nexport default connect(null, mapDispatchToProps)(TodoItem);","import React from \"react\";\nimport TodoItem from \"./TodoItem\";\nimport { connect, ConnectedProps } from \"react-redux\";\nimport { RootState } from \"../redux/store\";\n\nconst mapStateToProps = (state: RootState) => ({todos: state.todos.todos})\nconst connector = connect(mapStateToProps)\n\ntype PropsFromRedux = ConnectedProps<typeof connector>\ntype TodoListProps = PropsFromRedux\n\nconst TodoList: React.FC<TodoListProps> = ({ todos }) => {\n  return (\n    <div className={\"todo-list-wrapper\"}>\n      <h3 className={\"label-md\"}>Список задач</h3>\n      <div className={\"todo-list\"}>\n        { todos.length === 0\n          ? <h4 className={\"label-md\"}>Задач не добавлено</h4>\n          : \"\"\n        }\n        {todos.map(todo =>\n          <TodoItem todo={todo} key={todo.id} />\n        )}\n      </div>\n    </div>\n  )\n}\n\nexport default connector(TodoList);","import React from \"react\"\nimport TodoForm from \"../components/TodoForm\";\nimport TodoList from \"../components/TodoList\";\n\nconst Main: React.FC = () => {\n  return (\n    <React.Fragment>\n      <TodoForm />\n      <TodoList />\n    </React.Fragment>\n  )\n}\n\nexport default Main;","import React, {useEffect} from \"react\";\nimport {connect, ConnectedProps} from \"react-redux\";\nimport {RootState} from \"../redux/store\";\nimport {fetchTodos} from \"../redux/actionCreators/todosActions\";\n\nconst mapStateToProps = (state: RootState) => {\n  return { todos: state.fetchedTodos.todos }\n}\nconst mapDispatchToProps = {\n  fetchTodos\n}\nconst connector = connect(mapStateToProps, mapDispatchToProps)\n\ntype ReduxProps = ConnectedProps<typeof connector>\n\nconst FetchedTodos: React.FC<ReduxProps> = ({ todos, fetchTodos }) => {\n  return (\n    <div className={\"fetched-list-wrapper\"}>\n      <h1 className={\"label-md\"}>Тестовые данные</h1>\n      <button className={\"p-4 rounded-md bg-yellow-500 text-white mb-4\"} onClick={() => fetchTodos()}>Загрузить данные</button>\n      { todos.length === 0\n        ? <h4 className={\"label-md\"}>Данных нет</h4>\n        : \"\"\n      }\n      <div className={\"fetched-items\"}>\n        {todos.map(todo =>\n          <div className={`fetched-item ${todo.completed ? \"bg-green-400\" : \"bg-red-400\"}`}>\n            <h4>{todo.title}</h4>\n            <small>{todo.completed ? \"Завершено!\" : \"Надо бы сделать)\"}</small>\n            <button>Подробнее о пользователе</button>\n          </div>\n        )}\n      </div>\n    </div>\n  )\n}\n\nexport default connector(FetchedTodos);","import React from \"react\";\nimport {RootState} from \"../redux/store\";\nimport {connect, ConnectedProps} from \"react-redux\";\nimport TodoItem from \"../components/TodoItem\";\n\nconst mapStateToProps = (state: RootState) => {\n  return { completedTodos: state.todos.completed }\n}\nconst connector = connect(mapStateToProps)\n\ntype ReduxProps = ConnectedProps<typeof connector>\n\nconst CompletedTodos: React.FC<ReduxProps> = ({ completedTodos }) => {\n  return (\n    <div className={\"todo-list-wrapper\"}>\n      <h3 className={\"label-md\"}>Список завершённых задач</h3>\n      <div className={\"todo-list\"}>\n        { completedTodos.length === 0\n          ? <h4 className={\"label-md\"}>Задач не добавлено</h4>\n          : \"\"}\n        {completedTodos.map(todo =>\n          <TodoItem todo={todo} key={todo.id} />\n        )}\n      </div>\n    </div>\n  )\n}\n\nexport default connector(CompletedTodos);","import React from 'react';\nimport { Switch, Route } from \"react-router-dom\";\nimport './App.css';\nimport \"./assets/tailwind.css\";\nimport \"./assets/scss/app.scss\";\nimport NavigationList from \"./components/NavigationList\";\nimport Main from \"./views/Main\";\nimport FetchedTodos from \"./views/FetchedTodos\";\nimport CompletedTodos from \"./views/CompletedTodos\";\n\nconst App: React.FC = () => {\n    return (\n      <div className={\"main\"}>\n        <NavigationList />\n        <div className={\"todo-wrapper\"}>\n          <Switch>\n            <Route exact path={\"/\"} component={Main} />\n            <Route path={\"/completed\"} component={CompletedTodos} />\n            <Route path={\"/fetched\"} component={FetchedTodos} />\n          </Switch>\n        </div>\n      </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {ADD_TODO, COMPLETE_TODO, DELETE_TODO, MOVE_TODO_TO_MAIN} from \"../actionTypes\";\nimport {Reducer} from \"redux\";\nimport {ITodo} from \"../../interfaces/todo\";\n\ninterface TodosState {\n  todos: ITodo[],\n  completed: ITodo[],\n  trash: ITodo[]\n}\n\nconst initialState: TodosState = {\n  todos: [],\n  completed: [],\n  trash: []\n}\n\nexport const todosReducer: Reducer<TodosState> = (state = initialState, action) => {\n  switch (action.type) {\n    case ADD_TODO: {\n      return {...state, todos: [...state.todos, action.payload]}\n    }\n    case COMPLETE_TODO: {\n      const completedTodos = [...state.completed];\n      const mainTodos = state.todos.filter(item => {\n        if (item.id === action.payload.id) {\n          item.completed = true;\n          completedTodos.push({...item})\n          return false\n        }\n        return true\n      })\n      return {...state, todos: mainTodos, completed: completedTodos}\n    }\n    case MOVE_TODO_TO_MAIN: {\n      const mainTodos = [...state.todos];\n      const completedTodos = state.completed.filter(item => {\n        if (item.id === action.payload.id) {\n          item.completed = false;\n          mainTodos.push({...item})\n          return false\n        }\n        return true\n      })\n      return {...state, todos: mainTodos, completed: completedTodos}\n    }\n    case DELETE_TODO: {\n      const updatedTodos = state.todos.filter(item => item.id !== action.payload.id)\n      return { ...state, todos: updatedTodos }\n    }\n    default:\n      return state\n  }\n}","import {ITodo} from \"../../interfaces/todo\";\nimport {Reducer} from \"redux\";\nimport { SET_FETCHED_TODOS } from \"../actionTypes\";\n\ninterface FetchedTodosReducer {\n  todos: ITodo[]\n}\n\nconst initialState: FetchedTodosReducer = {\n  todos: []\n}\n\nexport const fetchedTodosReducer: Reducer<FetchedTodosReducer> = (state = initialState, action) => {\n  switch (action.type) {\n    case SET_FETCHED_TODOS: {\n      return { ...state, todos: state.todos.concat(action.payload)}\n    }\n    default:\n      return state;\n  }\n}","import { combineReducers } from \"redux\";\nimport { todosReducer } from \"./todosReducer\";\nimport { fetchedTodosReducer } from \"./fetchedTodosReducer\";\n\nexport const rootReducer = combineReducers({\n  todos: todosReducer,\n  fetchedTodos: fetchedTodosReducer\n})","import { takeEvery, put, call } from \"redux-saga/effects\"\nimport { FETCH_TODOS } from \"./actionTypes\";\nimport {setFetchedTodos} from \"./actionCreators/todosActions\";\n\nexport function* sagaWatcher() {\n  yield takeEvery(FETCH_TODOS, sagaFetchWorker);\n}\n\nfunction* sagaFetchWorker(): any {\n  const todos = yield call(fetchTodosFromApi)\n  yield put(setFetchedTodos(todos));\n}\n\nasync function fetchTodosFromApi() {\n  const response = await fetch(\"https://jsonplaceholder.typicode.com/todos\");\n  return await response.json()\n}","import { applyMiddleware, createStore } from \"redux\";\nimport { rootReducer } from \"./reducers/rootReducer\";\nimport thunk from \"redux-thunk\";\nimport compose from \"redux-typescript/lib/utils/compose\";\nimport createSagaMiddleware from \"redux-saga\"\nimport {sagaWatcher} from \"./sagas\";\n\nconst sagaMiddleware = createSagaMiddleware()\n\nconst store = createStore(\n  rootReducer,\n  compose(\n    applyMiddleware(thunk, sagaMiddleware),\n    // @ts-ignore\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__(),\n  )\n);\n\nsagaMiddleware.run(sagaWatcher)\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { BrowserRouter } from \"react-router-dom\";\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/store\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <BrowserRouter>\n        <App />\n      </BrowserRouter>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}